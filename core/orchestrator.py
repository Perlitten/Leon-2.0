"""
–ú–æ–¥—É–ª—å –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è Leon Trading Bot.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏
–≤—Å–µ—Ö –ø–æ–¥—Å–∏—Å—Ç–µ–º Leon Trading Bot. –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤,
—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å–∏—Å—Ç–µ–º—ã, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ —Ä–∞–±–æ—Ç—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π.
"""

import asyncio
import logging
import traceback
from typing import Dict, List, Any, Optional, Union, Callable, Set
from datetime import datetime
import random

from core.config_manager import ConfigManager
from core.component_factory import (
    ExchangeFactory, NotificationFactory, TradingFactory, 
    VisualizationFactory, MLFactory
)
from core.exceptions import (
    OrchestratorError, InitializationError, OperationError, 
    InvalidModeError, CommandError, ModelLoadError, 
    PredictionError, EvaluationError
)
from core.constants import (
    EVENT_TYPES, TRADING_MODES, LOCALIZATION_KEYS, SYSTEM_STATUSES, TradingModes, EventTypes
)
from core.localization import LocalizationManager
from notification.telegram.bot import TelegramBot


class EventBus:
    """
    –®–∏–Ω–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã.
    
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∏–Ω—ã —Å–æ–±—ã—Ç–∏–π."""
        self.handlers: Dict[str, Set[Callable]] = {}
        self.logger = logging.getLogger("EventBus")
    
    def register_handler(self, event_type: str, handler: Callable) -> None:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π.
        
        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            handler: –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
        """
        if event_type not in self.handlers:
            self.handlers[event_type] = set()
        
        self.handlers[event_type].add(handler)
        self.logger.debug(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è '{event_type}'")
    
    def unregister_handler(self, event_type: str, handler: Callable) -> bool:
        """
        –û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π.
        
        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            handler: –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        """
        if event_type not in self.handlers or handler not in self.handlers[event_type]:
            self.logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è '{event_type}'")
            return False
        
        self.handlers[event_type].remove(handler)
        self.logger.debug(f"–û—Ç–º–µ–Ω–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è '{event_type}'")
        return True
    
    async def emit(self, event_type: str, data: Any = None) -> None:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ.
        
        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        """
        if event_type not in self.handlers:
            self.logger.debug(f"–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–æ–±—ã—Ç–∏—è '{event_type}'")
            return
        
        self.logger.debug(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è '{event_type}'")
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ–π —Å–¥–µ–ª–∫–∏, –≤—ã–≤–æ–¥–∏–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É
        if event_type == EVENT_TYPES["TRADE_COMPLETED"] and data and data.get("profit", 0) > 0:
            localization_manager = self.orchestrator.localization_manager if hasattr(self, 'orchestrator') else None
            if localization_manager:
                success_phrases = localization_manager.get_text(LOCALIZATION_KEYS["SUCCESS_PHRASES"])
                success_phrase = random.choice(success_phrases)
                print(f"\nüéâ {success_phrase}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
        handlers = self.handlers[event_type].copy()
        
        # –í—ã–∑—ã–≤–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        tasks = []
        for handler in handlers:
            if asyncio.iscoroutinefunction(handler):
                tasks.append(asyncio.create_task(handler(data)))
            else:
                try:
                    handler(data)
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è '{event_type}': {str(e)}")
                    self.logger.debug(traceback.format_exc())
        
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)


class CommandProcessor:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã.
    """
    
    def __init__(self, orchestrator: 'LeonOrchestrator'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥.
        
        Args:
            orchestrator: –≠–∫–∑–µ–º–ø–ª—è—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        """
        self.orchestrator = orchestrator
        self.commands: Dict[str, Callable] = {}
        self.logger = logging.getLogger("CommandProcessor")
    
    def register_command(self, command: str, handler: Callable) -> None:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã.
        
        Args:
            command: –ö–æ–º–∞–Ω–¥–∞
            handler: –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã
        """
        self.commands[command] = handler
        self.logger.debug(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '{command}'")
    
    def validate_command(self, command: str, *args, **kwargs) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏ –µ–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
        
        Args:
            command: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            *args, **kwargs: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
            
        Returns:
            bool: –î–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã
        """
        if command not in self.commands:
            self.logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: '{command}'")
            return False
        
        return True
    
    async def process_command(self, command: str, *args, **kwargs) -> Any:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            command: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            *args, **kwargs: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
            
        Returns:
            Any: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            
        Raises:
            CommandError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        """
        if not self.validate_command(command, *args, **kwargs):
            raise CommandError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: '{command}'", command=command)
        
        handler = self.commands[command]
        
        try:
            self.logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: '{command}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –æ—Ç–≤–µ—Ç "–Ω–µ—Ç"
            has_no_answer = False
            for arg in args:
                if isinstance(arg, str) and arg.lower() in ["–Ω–µ—Ç", "no", "n", "–Ω"]:
                    has_no_answer = True
                    break
            
            for key, value in kwargs.items():
                if isinstance(value, str) and value.lower() in ["–Ω–µ—Ç", "no", "n", "–Ω"]:
                    has_no_answer = True
                    break
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç "–Ω–µ—Ç", –≤—ã–≤–æ–¥–∏–º —à—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if has_no_answer and hasattr(self.orchestrator, 'localization_manager'):
                no_answer_text = self.orchestrator.localization_manager.get_text(LOCALIZATION_KEYS["NO_ANSWER"])
                print(f"\nüòè {no_answer_text}\n")
            
            if asyncio.iscoroutinefunction(handler):
                return await handler(*args, **kwargs)
            else:
                return handler(*args, **kwargs)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã '{command}': {str(e)}")
            self.logger.debug(traceback.format_exc())
            raise CommandError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã '{command}': {str(e)}", command=command) from e


class TradingModeManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∂–∏–º–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏.
    
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã (dry, real, backtest).
    """
    
    def __init__(self, orchestrator: 'LeonOrchestrator'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–µ–∂–∏–º–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏.
        
        Args:
            orchestrator: –≠–∫–∑–µ–º–ø–ª—è—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        """
        self.orchestrator = orchestrator
        self.current_mode: Optional[str] = None
        self.available_modes = ["dry", "real", "backtest"]
        self.logger = logging.getLogger("TradingModeManager")
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.trader = None
        self.position_monitor = None
    
    def validate_mode(self, mode: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.
        
        Args:
            mode: –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            bool: –î–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å —Ä–µ–∂–∏–º–∞
        """
        if mode not in self.available_modes:
            self.logger.warning(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: '{mode}'")
            return False
        
        return True
    
    def get_current_mode(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã.
        
        Returns:
            str: –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        """
        return self.current_mode
    
    async def switch_to_mode(self, mode: str) -> bool:
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã.
        
        Args:
            mode: –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ("dry", "real", "backtest")
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            
        Raises:
            InvalidModeError: –ü—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ä–µ–∂–∏–º–∞
        """
        if not self.validate_mode(mode):
            raise InvalidModeError(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: '{mode}'", mode=mode)
        
        if self.current_mode == mode:
            self.logger.info(f"–°–∏—Å—Ç–µ–º–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ '{mode}'")
            return True
        
        # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¥—Ä—É–≥–æ–º —Ä–µ–∂–∏–º–µ, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–µ
        if self.current_mode is not None:
            self.logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ '{self.current_mode}'")
            await self._stop_current_mode()
        
        self.logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º '{mode}'")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
        await self._start_mode(mode)
        
        self.current_mode = mode
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
        await self.orchestrator.event_bus.emit("mode_changed", {
            "mode": mode,
            "timestamp": datetime.now().isoformat()
        })
        
        return True
    
    async def _stop_current_mode(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã."""
        mode = self.current_mode
        
        # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞
        if mode:
            localization_manager = self.orchestrator.localization_manager
            exit_messages = localization_manager.get_text(LOCALIZATION_KEYS["MODE_EXIT_MESSAGES"])
            if mode in exit_messages:
                print(exit_messages[mode])
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π
        if self.position_monitor:
            try:
                await self.position_monitor.stop()
                self.logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–π: {str(e)}")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–π–¥–µ—Ä
        if self.trader:
            try:
                await self.trader.stop()
                self.logger.info("–¢—Ä–µ–π–¥–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç—Ä–µ–π–¥–µ—Ä–∞: {str(e)}")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        if hasattr(self.orchestrator, 'visualization_manager'):
            await self.orchestrator.visualization_manager.stop_visualization()
    
    async def _start_mode(self, mode: str) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã.
        
        Args:
            mode: –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ("dry", "real", "backtest")
        """
        config = self.orchestrator.config_manager.get_config()
        localization_manager = self.orchestrator.localization_manager
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–±—Ä–∏–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        trading_factory = TradingFactory(config)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        binance_client = self.orchestrator.binance_client
        telegram = self.orchestrator.telegram
        strategy = self.orchestrator.strategy
        risk_controller = self.orchestrator.risk_controller
        decision_maker = self.orchestrator.decision_maker
        visualizer = self.orchestrator.visualizer if hasattr(self.orchestrator, 'visualizer') else None
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–∞
        symbol = config["general"]["symbol"]
        leverage = config["general"]["leverage"]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram, –µ—Å–ª–∏ –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if telegram and hasattr(telegram, 'connected') and telegram.connected:
            try:
                trader_name = {"dry": "DryModeTrader", "real": "RealTrader", "backtest": "BacktestTrader"}[mode]
                await telegram.send_message(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ LEON\n\n–†–µ–∂–∏–º: {trader_name}\n–ü–∞—Ä–∞: {symbol}\n–ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ: {leverage}x")
                self.logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –≤ Telegram")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {str(e)}")
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–∞
        trader_params = {
            'symbol': symbol,
            'binance_client': binance_client,
            'strategy': strategy,
            'telegram': telegram,
            'risk_controller': risk_controller,
            'leverage': leverage,
            'decision_maker': decision_maker
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if mode == "dry":
            trader_params.update({
                'initial_balance': config["general"]["initial_balance"],
                'visualizer': visualizer,
                'update_interval': config["general"].get("update_interval", 5)
            })
        elif mode == "backtest":
            trader_params.update({
                'interval': config["backtest"]["interval"],
                'days': config["backtest"]["days"],
                'commission': config["backtest"]["commission"]
            })
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–π–¥–µ—Ä
        self.trader = trading_factory.create_trader(mode, **trader_params)
        await self.trader.start()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π
        from trading.position_monitor import PositionMonitor
        self.position_monitor = PositionMonitor(
            trader=self.trader,
            max_position_age_hours=config["safety"]["stuck_position_timeout"],
            check_interval_minutes=15,
            loss_threshold_percent=config["safety"].get("max_position_loss", 5.0),
            enable_cleanup=config["safety"]["cleanup_stuck_positions"]
        )
        await self.position_monitor.start()
        
        # –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        welcome_messages = localization_manager.get_text(LOCALIZATION_KEYS["MODE_WELCOME_MESSAGES"])
        print(welcome_messages.get(mode, f"\nüöÄ –†–ï–ñ–ò–ú '{mode.upper()}' –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!\n"))
        
        warning_messages = localization_manager.get_text(LOCALIZATION_KEYS["MODE_WARNING_MESSAGES"])
        if mode == TRADING_MODES["DRY"]:
            balance = config['general']['initial_balance']
            print(warning_messages["dry"].format(balance=balance))
        elif mode == TRADING_MODES["REAL"]:
            print(warning_messages["real"])
        elif mode == TRADING_MODES["BACKTEST"]:
            interval = config["backtest"]["interval"]
            days = config["backtest"]["days"]
            print(warning_messages["backtest"].format(interval=interval, days=days))
        
        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ML, –≤—ã–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        use_ml = (config["general"].get("decision_mode") == "ml" or config["strategy"].get("use_ml", False))
        if use_ml:
            ml_phrases = localization_manager.get_text(LOCALIZATION_KEYS["ML_PHRASES"])
            ml_phrase = random.choice(ml_phrases)
            budget_killer_text = localization_manager.get_text(LOCALIZATION_KEYS["BUDGET_KILLER"])
            print(budget_killer_text.format(phrase=ml_phrase))
        
        press_ctrl_c = localization_manager.get_text(LOCALIZATION_KEYS["PRESS_CTRL_C"])
        print(press_ctrl_c)


class MLIntegrationManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ML-–º–æ–¥–µ–ª—è–º–∏.
    
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–≥—Ä—É–∑–∫—É, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ML-–º–æ–¥–µ–ª–µ–π.
    """
    
    def __init__(self, orchestrator: 'LeonOrchestrator'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ML-–º–æ–¥–µ–ª—è–º–∏.
        
        Args:
            orchestrator: –≠–∫–∑–µ–º–ø–ª—è—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        """
        self.orchestrator = orchestrator
        self.models = {}
        self.current_model = None
        self.logger = logging.getLogger("MLIntegrationManager")
    
    async def load_model(self, model_name: str) -> bool:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç ML-–º–æ–¥–µ–ª—å.
        
        Args:
            model_name: –ò–º—è –º–æ–¥–µ–ª–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
            
        Raises:
            ModelLoadError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
        """
        try:
            self.logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ '{model_name}'")
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
            # ...
            
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
            self.models[model_name] = {
                "name": model_name,
                "loaded_at": datetime.now().isoformat()
            }
            
            self.current_model = model_name
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏
            await self.orchestrator.event_bus.emit("model_loaded", {
                "model_name": model_name,
                "timestamp": datetime.now().isoformat()
            })
            
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏ '{model_name}': {str(e)}")
            self.logger.debug(traceback.format_exc())
            raise ModelLoadError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏ '{model_name}': {str(e)}", model_name=model_name) from e
    
    async def get_prediction(self, data: Any) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç ML-–º–æ–¥–µ–ª–∏.
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            
        Raises:
            PredictionError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        """
        if self.current_model is None:
            raise PredictionError("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")
        
        try:
            self.logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç –º–æ–¥–µ–ª–∏ '{self.current_model}'")
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            # ...
            
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
            prediction = {
                "model": self.current_model,
                "timestamp": datetime.now().isoformat(),
                "prediction": {
                    "direction": "BUY" if datetime.now().second % 2 == 0 else "SELL",
                    "confidence": 0.75,
                    "target_price": 50000.0
                }
            }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            await self.orchestrator.event_bus.emit("prediction_received", prediction)
            
            return prediction
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {str(e)}")
            self.logger.debug(traceback.format_exc())
            raise PredictionError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {str(e)}") from e
    
    async def evaluate_model(self, model_name: str, test_data: Any) -> Dict[str, Any]:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ML-–º–æ–¥–µ–ª–∏.
        
        Args:
            model_name: –ò–º—è –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
            test_data: –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏
            
        Raises:
            EvaluationError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ü–µ–Ω–∫–∏
        """
        if model_name not in self.models:
            raise EvaluationError(f"–ú–æ–¥–µ–ª—å '{model_name}' –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞", model_name=model_name)
        
        try:
            self.logger.info(f"–û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏ '{model_name}'")
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–∏
            # ...
            
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
            evaluation = {
                "model": model_name,
                "timestamp": datetime.now().isoformat(),
                "metrics": {
                    "accuracy": 0.85,
                    "precision": 0.82,
                    "recall": 0.79,
                    "f1_score": 0.80
                }
            }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ—Ü–µ–Ω–∫–∏
            await self.orchestrator.event_bus.emit("model_evaluated", evaluation)
            
            return evaluation
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –º–æ–¥–µ–ª–∏ '{model_name}': {str(e)}")
            self.logger.debug(traceback.format_exc())
            raise EvaluationError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –º–æ–¥–µ–ª–∏ '{model_name}': {str(e)}", model_name=model_name) from e


class VisualizationManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.
    
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö.
    """
    
    def __init__(self, orchestrator: 'LeonOrchestrator'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.
        
        Args:
            orchestrator: –≠–∫–∑–µ–º–ø–ª—è—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        """
        self.orchestrator = orchestrator
        self.visualizer = None
        self.visualization_task = None
        self.logger = logging.getLogger("VisualizationManager")
    
    async def start_visualization(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é."""
        config = self.orchestrator.config_manager.get_config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        if not config["visualization"]["enabled"]:
            self.logger.info("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
        if not self.visualizer:
            visualization_factory = VisualizationFactory(config)
            self.visualizer = visualization_factory.create_visualizer()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        self.logger.info("–ó–∞–ø—É—Å–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
        self.visualization_task = asyncio.create_task(self._run_visualization())
    
    async def stop_visualization(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é."""
        if self.visualizer:
            self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä
            if hasattr(self.visualizer, 'stop_visualization'):
                self.visualizer.stop_visualization()
            
            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞
            if self.visualization_task and not self.visualization_task.done():
                self.visualization_task.cancel()
                try:
                    await self.visualization_task
                except asyncio.CancelledError:
                    pass
    
    async def _run_visualization(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏."""
        if not self.visualizer:
            return
        
        config = self.orchestrator.config_manager.get_config()
        update_interval = config["visualization"].get("update_interval", 1.0)
        
        try:
            self.logger.info(f"–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {update_interval} —Å–µ–∫")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
            self.visualizer.start_visualization()
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            while True:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
                self.visualizer.update()
                
                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                await asyncio.sleep(update_interval)
                
        except asyncio.CancelledError:
            self.logger.info("–ó–∞–¥–∞—á–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
            self.logger.debug(traceback.format_exc())
        finally:
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
            if self.visualizer:
                self.visualizer.stop_visualization()


class LeonOrchestrator:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –ø–æ–¥—Å–∏—Å—Ç–µ–º–∞–º–∏ Leon Trading Bot.
    
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã,
    —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º, –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤.
    """
    
    def __init__(self, config_path: str = "config/config.yaml", env_file: str = ".env"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä.
        
        Args:
            config_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            env_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        """
        self.logger = logging.getLogger(__name__)
        self.config_path = config_path
        self.env_file = env_file
        self.config = {}
        self.running = False
        self.initialized = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.event_bus = EventBus()
        self.command_processor = CommandProcessor(self)
        self.trading_mode_manager = TradingModeManager(self)
        self.ml_integration_manager = MLIntegrationManager(self)
        self.visualization_manager = VisualizationManager(self)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        from core.localization import get_localization_manager
        self.localization_manager = get_localization_manager()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
        self._register_base_commands()
        
        self.logger.info("–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
        self._init_telegram_bot()
    
    def _register_base_commands(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã."""
        self.command_processor.register_command("start", self.start)
        self.command_processor.register_command("stop", self.stop)
        self.command_processor.register_command("switch_mode", self.switch_mode)
        self.command_processor.register_command("get_status", self.get_status)
    
    async def start(self, mode: Optional[str] = None) -> bool:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.
        
        Args:
            mode: –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ("dry", "real", "backtest"). –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∂–∏–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞
            
        Raises:
            OperationError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø—É—Å–∫–∞
        """
        if not self.initialized:
            raise OperationError("–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        if self.running:
            self.logger.warning("–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return True
        
        try:
            # –ï—Å–ª–∏ —Ä–µ–∂–∏–º –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∂–∏–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if mode is None:
                mode = self.config_manager.get_value("general.mode", "dry")
            
            self.logger.info(f"–ó–∞–ø—É—Å–∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ '{mode}'")
            
            # –í—ã–≤–æ–¥–∏–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_phrases = self.localization_manager.get_text(LOCALIZATION_KEYS["WELCOME_PHRASES"])
            welcome_phrase = random.choice(welcome_phrases)
            print(f"\n{welcome_phrase}\n")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            await self.visualization_manager.start_visualization()
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
            await self.trading_mode_manager.switch_to_mode(mode)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–∞–±–æ—Ç—ã
            self.running = True
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            await self.event_bus.emit("orchestrator_started", {
                "mode": mode,
                "timestamp": datetime.now().isoformat()
            })
            
            # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
            if self.telegram_bot:
                await self.telegram_bot.start()
            
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}")
            self.logger.debug(traceback.format_exc())
            raise OperationError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}", operation="start") from e
    
    async def stop(self) -> bool:
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã.
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            
        Raises:
            OperationError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        """
        if not self.running:
            self.logger.warning("–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return True
        
        try:
            self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
            await self.trading_mode_manager._stop_current_mode()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            await self.visualization_manager.stop_visualization()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
            if self.telegram_bot and hasattr(self.telegram_bot, 'connected') and self.telegram_bot.connected:
                try:
                    await self.telegram_bot.stop()
                    self.logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –≤ Telegram")
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {str(e)}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Binance
            if self.binance_client:
                try:
                    await self.binance_client.close()
                    self.logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Binance –∑–∞–∫—Ä—ã—Ç–æ")
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Binance: {str(e)}")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–∞–±–æ—Ç—ã
            self.running = False
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            await self.event_bus.emit("orchestrator_stopped", {
                "timestamp": datetime.now().isoformat()
            })
            
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}")
            self.logger.debug(traceback.format_exc())
            raise OperationError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}", operation="stop") from e
    
    async def switch_mode(self, mode: str) -> bool:
        """
        –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã.
        
        Args:
            mode: –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ("dry", "real", "backtest")
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            
        Raises:
            InvalidModeError: –ü—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ä–µ–∂–∏–º–∞
        """
        if not self.initialized:
            raise OperationError("–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        return await self.trading_mode_manager.switch_to_mode(mode)
    
    async def process_command(self, command: str, *args, **kwargs) -> Any:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            command: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            *args, **kwargs: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
            
        Returns:
            Any: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            
        Raises:
            CommandError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        """
        if not self.initialized:
            raise OperationError("–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        return await self.command_processor.process_command(command, *args, **kwargs)
    
    def register_event_handler(self, event_type: str, handler: Callable) -> None:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π.
        
        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            handler: –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è
        """
        if not self.initialized:
            self.logger.warning("–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        self.event_bus.register_handler(event_type, handler)
    
    async def emit_event(self, event_type: str, data: Any = None) -> None:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ.
        
        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        """
        if not self.initialized:
            self.logger.warning("–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        await self.event_bus.emit(event_type, data)
    
    def get_status(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã.
        
        Returns:
            Dict[str, Any]: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ
        """
        status = {
            "is_running": self.running,
            "is_initialized": self.initialized,
            "current_mode": self.trading_mode_manager.get_current_mode() if self.initialized else None,
            "timestamp": datetime.now().isoformat()
        }
        
        return status
    
    async def _initialize_components(self, config: Dict[str, Any]) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–∞–±—Ä–∏–∫.
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        """
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            exchange_factory = ExchangeFactory(config)
            notification_factory = NotificationFactory(config)
            trading_factory = TradingFactory(config)
            visualization_factory = VisualizationFactory(config)
            ml_factory = MLFactory(config)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
            mode = config["general"]["mode"]
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Binance
            self.binance_client = exchange_factory.create_binance_client(mode)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Telegram
            self.telegram = notification_factory.create_telegram_integration()
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            self.strategy = trading_factory.create_strategy()
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ä–∏—Å–∫–æ–≤
            self.risk_controller = trading_factory.create_risk_controller()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ ML-—Ä–µ–∂–∏–º
            use_ml = (config["general"].get("decision_mode") == "ml" or 
                      config["strategy"].get("use_ml", False))
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
            self.decision_maker = await ml_factory.create_decision_maker(
                use_ml, self.strategy, self.risk_controller
            )
            
            # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä, –µ—Å–ª–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞
            if config["visualization"]["enabled"]:
                self.visualizer = visualization_factory.create_visualizer()
                self.visualization_manager.visualizer = self.visualizer 
        except Exception as e:
            error_phrases = self.localization_manager.get_text(LOCALIZATION_KEYS["ERROR_PHRASES"])
            error_phrase = random.choice(error_phrases)
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {str(e)}")
            self.logger.debug(traceback.format_exc())
            print(f"\n‚ö†Ô∏è {error_phrase}")
            raise InitializationError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {str(e)}") from e 

    async def _display_menu(self) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞.
        """
        from core.constants import LOCALIZATION_KEYS
        
        while self.running:
            print("\n" + "=" * 50)
            print("LEON TRADING BOT - –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ")
            print("=" * 50)
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
            current_mode = self.trading_mode_manager.get_current_mode()
            mode_name = self.localization_manager.get_text(f"{LOCALIZATION_KEYS['MODE_NAMES']}.{current_mode}")
            
            print(f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {mode_name}")
            print("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:")
            print("1. –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏")
            print("2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏ ML")
            print("3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ—Ç—á–µ—Ç—ã")
            print("4. –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            print("0. –í—ã—Ö–æ–¥")
            
            choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ")
            
            if choice == "0":
                await self.stop()
                break
            elif choice.lower() in ["–Ω–µ—Ç", "no", "n", "–Ω"]:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "–Ω–µ—Ç"
                no_answer_text = self.localization_manager.get_text(LOCALIZATION_KEYS["NO_ANSWER"])
                print(f"\nüòè {no_answer_text}\n")
                continue
            elif choice == "1":
                await self._display_mode_menu()
            elif choice == "2":
                await self._display_ml_menu()
            elif choice == "3":
                await self._display_monitoring_menu()
            elif choice == "4":
                await self._display_settings_menu()
            else:
                print("\n–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.") 

    def _init_telegram_bot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞."""
        try:
            self.telegram_bot = TelegramBot(self.config, self.localization_manager)
            self.telegram_bot.set_orchestrator(self)
            self.logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
            self.telegram_bot = None

    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã."""
        if self.running:
            logger.warning("–°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            await self._init_components()
            
            # –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await self._start_components()
            
            # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
            if self.telegram_bot:
                await self.telegram_bot.start()
            
            self.running = True
            logger.info(f"–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º–µ: {self.current_mode}")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
            if self.telegram_bot:
                await self._send_status_update()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã: {e}")
            await self.stop()
            raise

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã."""
        if not self.running:
            logger.warning("–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
        
        try:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞
            if self.telegram_bot:
                await self.telegram_bot.stop()
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await self._stop_components()
            
            self.running = False
            logger.info("–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∏—Å—Ç–µ–º—ã: {e}")
            raise

    async def set_mode(self, mode: str) -> dict:
        """
        –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã.
        
        Args:
            mode: –ù–æ–≤—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        if mode not in [TradingModes.DRY, TradingModes.BACKTEST, TradingModes.REAL]:
            self.logger.error(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {mode}")
            return {"success": False, "error": f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {mode}"}
        
        if self.current_mode == mode:
            self.logger.info(f"–°–∏—Å—Ç–µ–º–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ: {mode}")
            return {"success": True, "mode": mode}
        
        try:
            # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–µ
            was_running = self.running
            if was_running:
                await self.stop()
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
            self.current_mode = mode
            self.config.set("TRADING_MODE", mode)
            
            # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–µ —Å–Ω–æ–≤–∞
            if was_running:
                await self.start()
            
            self.logger.info(f"–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mode}")
            return {"success": True, "mode": mode}
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã: {e}")
            return {"success": False, "error": str(e)}

    async def get_status(self) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã.
        
        Returns:
            –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        """
        status = []
        status.append(f"–°—Ç–∞—Ç—É—Å: {'–ó–∞–ø—É—â–µ–Ω–∞' if self.running else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}")
        status.append(f"–†–µ–∂–∏–º: {self._get_mode_display()}")
        
        if self.trader:
            balance = await self.get_balance()
            status.append(f"–ë–∞–ª–∞–Ω—Å: {balance:.2f} USDT")
            
            positions = await self.get_positions()
            status.append(f"–û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
        
        return "\n".join(status)

    async def get_balance(self) -> float:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.
        
        Returns:
            –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        """
        if not self.trader:
            logger.warning("–¢—Ä–µ–π–¥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return 0.0
        
        try:
            balance = await self.trader.get_balance()
            return balance
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return 0.0

    async def get_positions(self) -> list:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.
        
        Returns:
            –°–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        """
        if not self.trader:
            logger.warning("–¢—Ä–µ–π–¥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return []
        
        try:
            positions = await self.trader.get_positions()
            return positions
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
            return []

    async def open_position(self, direction: str) -> dict:
        """
        –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏.
        
        Args:
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ (BUY/SELL)
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        if not self.trader:
            logger.warning("–¢—Ä–µ–π–¥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return {"success": False, "error": "–¢—Ä–µ–π–¥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞
            symbol = self.config.get("TRADING_SYMBOL", "BTCUSDT")
            
            # –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            result = await self.trader.enter_position(symbol, direction)
            
            if result.get("success"):
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                if self.telegram_bot:
                    await self.telegram_bot.send_trade_notification(
                        symbol=symbol,
                        direction=direction,
                        price=result.get("price"),
                        size=result.get("size")
                    )
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return {"success": False, "error": str(e)}

    async def close_all_positions(self) -> dict:
        """
        –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π.
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        if not self.trader:
            logger.warning("–¢—Ä–µ–π–¥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return {"success": False, "error": "–¢—Ä–µ–π–¥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            positions = await self.trader.get_positions()
            
            if not positions:
                return {"success": True, "count": 0, "total_pnl": 0.0}
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π
            total_pnl = 0.0
            for pos in positions:
                result = await self.trader.exit_position(
                    pos["symbol"],
                    pos["direction"]
                )
                
                if result.get("success"):
                    total_pnl += result.get("pnl", 0.0)
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    if self.telegram_bot:
                        await self.telegram_bot.send_trade_notification(
                            symbol=pos["symbol"],
                            direction="SELL" if pos["direction"] == "BUY" else "BUY",
                            price=result.get("price"),
                            size=pos["size"],
                            pnl=result.get("pnl")
                        )
            
            return {
                "success": True,
                "count": len(positions),
                "total_pnl": total_pnl
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
            return {"success": False, "error": str(e)}

    def _get_mode_display(self) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞.
        
        Returns:
            –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞
        """
        mode_map = {
            TradingModes.DRY: "–°–∏–º—É–ª—è—Ü–∏—è (Dry Mode)",
            TradingModes.BACKTEST: "–ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥",
            TradingModes.REAL: "–†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è"
        }
        return mode_map.get(self.current_mode, self.current_mode)

    async def _send_status_update(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ Telegram."""
        if not self.telegram_bot:
            return
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            symbol = self.config.get("TRADING_SYMBOL", "BTCUSDT")
            balance = await self.get_balance()
            leverage = int(self.config.get("LEVERAGE", 20))
            risk_per_trade = float(self.config.get("RISK_PER_TRADE", 2.0))
            stop_loss = float(self.config.get("STOP_LOSS_PERCENT", 2.0))
            take_profit = float(self.config.get("TAKE_PROFIT_PERCENT", 3.0))
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await self.telegram_bot.send_status_update(
                symbol=symbol,
                mode=self.current_mode,
                balance=balance,
                leverage=leverage,
                risk_per_trade=risk_per_trade,
                stop_loss=stop_loss,
                take_profit=take_profit
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

    async def _init_components(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã."""
        await self._initialize_components(self.config)

    async def _start_components(self) -> None:
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã."""
        # –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
        await self._start_components_for_mode(self.current_mode)

    async def _start_components_for_mode(self, mode: str) -> None:
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞."""
        if mode == TRADING_MODES.DRY:
            await self._start_dry_mode()
        elif mode == TRADING_MODES.BACKTEST:
            await self._start_backtest_mode()
        elif mode == TRADING_MODES.REAL:
            await self._start_real_mode()

    async def _start_dry_mode(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ —Å—É—Ö–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∂–∏–º–∞ —Å—É—Ö–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        pass

    async def _start_backtest_mode(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ –±—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∂–∏–º–∞ –±—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        pass

    async def _start_real_mode(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏."""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        pass

    async def _stop_components(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã."""
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
        await self._stop_components_for_mode(self.current_mode)

    async def _stop_components_for_mode(self, mode: str) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞."""
        if mode == TRADING_MODES.DRY:
            await self._stop_dry_mode()
        elif mode == TRADING_MODES.BACKTEST:
            await self._stop_backtest_mode()
        elif mode == TRADING_MODES.REAL:
            await self._stop_real_mode()

    async def _stop_dry_mode(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —Å—É—Ö–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ —Å—É—Ö–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        pass

    async def _stop_backtest_mode(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –±—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ –±—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        pass

    async def _stop_real_mode(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏."""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∂–∏–º–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        pass 