"""
–ú–æ–¥—É–ª—å —Ñ–∞–±—Ä–∏–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è Leon Trading Bot.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–ª–∞—Å—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã,
—Ç–∞–∫–∏—Ö –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç—ã –±–∏—Ä–∂, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram, —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã —Ä–∏—Å–∫–æ–≤ –∏ —Ç.–¥.
"""

import logging
import traceback
from typing import Dict, Any, Optional
from datetime import datetime

from core.exceptions import InitializationError
from core.utils import mask_sensitive_data


class ComponentFactory:
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å —Ñ–∞–±—Ä–∏–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã.
    """
    
    def __init__(self, config: Dict[str, Any]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
    
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        """
        self.config = config
        self.logger = logging.getLogger("ComponentFactory")


class ExchangeFactory(ComponentFactory):
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–∏—Ä–∂.
    """
    
    def create_binance_client(self, mode: str) -> Any:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç Binance API.
        
        Args:
            mode: –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã ("dry", "real", "backtest")
            
        Returns:
            BinanceIntegration: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
            
        Raises:
            InitializationError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
        """
        try:
            api_key = self.config["binance"]["api_key"]
            api_secret = self.config["binance"]["api_secret"]
            testnet = self.config["binance"]["testnet"]
            
            # –î–ª—è —Ä–µ–∂–∏–º–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏ –∏ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Ç—å –∏–ª–∏ –ø—É–±–ª–∏—á–Ω—ã–π API
            if mode in ["dry", "backtest"] and not api_key:
                # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–µ–∂–∏–º–æ–≤, –Ω–µ —Ç—Ä–µ–±—É—é—â–∏—Ö API –∫–ª—é—á–µ–π
                self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Binance –¥–ª—è –Ω–µ—Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
                from exchange.binance.client import BinanceIntegration
                return BinanceIntegration("", "", testnet=testnet)
            
            if not api_key or not api_secret:
                raise ValueError("–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∫–ª—é—á–∏ Binance API")
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º API –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            self.logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Binance (testnet: {testnet}) —Å –∫–ª—é—á–æ–º: {mask_sensitive_data(api_key)}")
            from exchange.binance.client import BinanceIntegration
            return BinanceIntegration(api_key, api_secret, testnet=testnet)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ Binance: {str(e)}")
            self.logger.debug(traceback.format_exc())
            raise InitializationError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ Binance: {str(e)}", component="BinanceClient") from e


class NotificationFactory(ComponentFactory):
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    
    async def create_telegram_integration(self) -> Any:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Telegram.
        
        Returns:
            TelegramIntegration: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram
            
        Raises:
            InitializationError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
            if not self.config.get("telegram", {}).get("enabled", False):
                self.logger.info("Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ chat_id –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            bot_token = self.config.get("telegram", {}).get("bot_token", "")
            chat_id = self.config.get("telegram", {}).get("chat_id", "")
            
            if not bot_token or not chat_id:
                self.logger.warning("–ù–µ —É–∫–∞–∑–∞–Ω—ã —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id –¥–ª—è Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
                return None
            
            # –ú–∞—Å–∫–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            masked_token = mask_sensitive_data(bot_token)
            self.logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ç–æ–∫–µ–Ω–æ–º: {masked_token}")
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
            from notification.telegram_bot import TelegramIntegration
            telegram = TelegramIntegration(bot_token, chat_id, None)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
            success = await telegram.initialize()
            
            if not success:
                self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é")
                return None
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
            if not telegram.connected:
                self.logger.warning("Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
                return None
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            test_message = "ü§ñ *Leon Trading Bot* –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è..."
            await telegram.send_message(test_message)
            self.logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram")
            
            return telegram
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {str(e)}")
            self.logger.debug(traceback.format_exc())
            return None


class TradingFactory(ComponentFactory):
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
    """
    
    def create_strategy(self) -> Any:
        """
        –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        
        Returns:
            object: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            
        Raises:
            InitializationError: –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        """
        try:
            strategy_config = self.config["strategy"]
            strategy_params = strategy_config.get("params", {})
            
            self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã
            from trading.strategies.base import StrategyConfig
            config = StrategyConfig(
                stop_loss=strategy_params.get("stop_loss", 2.0),
                take_profit=strategy_params.get("take_profit", 3.0),
                risk_per_trade=self.config["risk"].get("max_loss_percent", 1.0),
                use_trailing_stop=strategy_params.get("use_trailing_stop", False),
                trailing_stop_activation=strategy_params.get("trailing_stop_activation", 0.5)
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
            from trading.strategies.simple_ma import SimpleMAStrategy
            strategy = SimpleMAStrategy(
                symbol=self.config["general"]["symbol"],
                timeframe=self.config["general"]["kline_interval"],
                params=strategy_params
            )
            
            return strategy
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {str(e)}")
            self.logger.debug(traceback.format_exc())
            raise InitializationError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {str(e)}", component="TradingStrategy") from e
    
    def create_risk_controller(self) -> Any:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏.
        
        Returns:
            RiskController: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Ä–∏—Å–∫–æ–≤
            
        Raises:
            InitializationError: –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Ä–∏—Å–∫–æ–≤
        """
        try:
            self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Ä–∏—Å–∫–æ–≤")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            max_daily_loss = self.config["safety"].get("max_daily_loss", 5.0)
            max_daily_trades = self.config["safety"].get("max_daily_trades", 10)
            
            # –°–æ–∑–¥–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ä–∏—Å–∫–æ–≤
            from trading.risk import create_risk_controller
            risk_controller = create_risk_controller(
                max_daily_loss=max_daily_loss,
                max_daily_trades=max_daily_trades
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
            self.logger.info(f"–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ä–∏—Å–∫–æ–≤ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: max_daily_loss={max_daily_loss}%, max_daily_trades={max_daily_trades}")
            
            return risk_controller
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Ä–∏—Å–∫–æ–≤: {str(e)}")
            self.logger.debug(traceback.format_exc())
            raise InitializationError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Ä–∏—Å–∫–æ–≤: {str(e)}", component="RiskController") from e
    
    def create_trader(self, mode: str, **kwargs) -> Any:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ç—Ä–µ–π–¥–µ—Ä –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º.
        
        Args:
            mode: –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ("dry", "real", "backtest")
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–∞
            
        Returns:
            object: –≠–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–π–¥–µ—Ä–∞
            
        Raises:
            InitializationError: –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–π–¥–µ—Ä–∞
        """
        try:
            self.logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–π–¥–µ—Ä–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞: {mode}")
            
            if mode == "dry":
                from trading.traders.dry_trader import DryModeTrader
                trader_class = DryModeTrader
            elif mode == "real":
                from trading.traders.real_trader import RealTrader
                trader_class = RealTrader
            elif mode == "backtest":
                from trading.traders.backtest_trader import BacktestTrader
                trader_class = BacktestTrader
            else:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {mode}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–π–¥–µ—Ä —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            trader = trader_class(**kwargs)
            
            return trader
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ {mode}: {str(e)}")
            self.logger.debug(traceback.format_exc())
            raise InitializationError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞: {str(e)}", component=f"{mode.capitalize()}Trader") from e


class VisualizationFactory(ComponentFactory):
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.
    """
    
    def create_visualizer(self) -> Any:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤–ª–µ.
        
        Returns:
            ConsoleVisualizer: –≠–∫–∑–µ–º–ø–ª—è—Ä –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞.
        """
        try:
            self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
            viz_config = {}
            if "visualization" in self.config:
                viz_config = self.config["visualization"]
            
            from visualization.console_ui import ConsoleVisualizer
            visualizer = ConsoleVisualizer(name="console", config=viz_config)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if "visualization" in self.config:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                if "language" in viz_config:
                    language = viz_config.get("language", "en")
                    self.logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {language}")
                    if hasattr(visualizer, 'set_language'):
                        visualizer.set_language(language)
            
            return visualizer
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {str(e)}")
            self.logger.debug(traceback.format_exc())
            raise InitializationError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞: {str(e)}", component="ConsoleVisualizer") from e


class MLFactory(ComponentFactory):
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.
    """
    
    async def create_decision_maker(self, use_ml: bool, strategy, risk_controller) -> Any:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π.
        
        Args:
            use_ml: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ ML –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
            strategy: –≠–∫–∑–µ–º–ø–ª—è—Ä —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            risk_controller: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Ä–∏—Å–∫–æ–≤
            
        Returns:
            object: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
            
        Raises:
            InitializationError: –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        """
        try:
            if use_ml:
                self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π")
                
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ML-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                # ...
                
                # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
                from ml.decision_maker import MLDecisionMaker
                decision_maker = MLDecisionMaker(strategy, risk_controller)
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
                model_path = self.config["ml"].get("model_path", "models/trading_model")
                await decision_maker.load_model(model_path)
                
                return decision_maker
            else:
                self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π")
                
                from ml.decision_maker import DecisionMaker
                return DecisionMaker(strategy, risk_controller)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π: {str(e)}")
            self.logger.debug(traceback.format_exc())
            raise InitializationError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π: {str(e)}", component="DecisionMaker") from e