"""
–ú–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ –¥–ª—è Leon Trading Bot.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ Telegram.
"""

import os
import logging
from typing import Dict, List, Optional, Callable, Any, Union
import asyncio
from datetime import datetime
import threading

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    ContextTypes,
    filters
)

from core.config_manager import ConfigManager
from core.constants import TradingModes, TradeDirections, TelegramCommands, TelegramCallbacks
from core.localization import LocalizationManager

logger = logging.getLogger(__name__)

class TelegramBot:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –±–æ—Ç–æ–º.
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ Telegram.
    """
    
    def __init__(self, config_manager: ConfigManager, localization: LocalizationManager):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞.
        
        Args:
            config_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            localization: –ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        self.config = config_manager
        self.localization = localization
        self.token = self.config.get("TELEGRAM_BOT_TOKEN")
        self.chat_id = self.config.get("TELEGRAM_CHAT_ID")
        
        # –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
        self.is_running = False
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.command_handlers = {}
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤
        self.callback_handlers = {}
        
        # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
        self.app = None
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ)
        self.orchestrator = None
        
        logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞."""
        if self.is_running:
            logger.warning("Telegram –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        if not self.token:
            logger.error("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞")
            return
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.app = Application.builder().token(self.token).build()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
            self.register_handlers()
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            await self.app.initialize()
            await self.app.start()
            await self.app.updater.start_polling()
            
            self.is_running = True
            logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await self.send_message(self.localization.get("telegram.bot_started"))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Telegram –±–æ—Ç–∞: {e}")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞."""
        if not self.is_running:
            logger.warning("Telegram –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
            await self.send_message(self.localization.get("telegram.bot_stopped"))
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
            await self.app.updater.stop()
            await self.app.stop()
            await self.app.shutdown()
            
            self.is_running = False
            logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Telegram –±–æ—Ç–∞: {e}")
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥."""
        # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler(TelegramCommands.START, self.cmd_start))
        self.app.add_handler(CommandHandler(TelegramCommands.HELP, self.cmd_help))
        self.app.add_handler(CommandHandler(TelegramCommands.STATUS, self.cmd_status))
        
        # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–µ–π
        self.app.add_handler(CommandHandler(TelegramCommands.TRADE, self.cmd_trade))
        self.app.add_handler(CommandHandler(TelegramCommands.BALANCE, self.cmd_balance))
        self.app.add_handler(CommandHandler(TelegramCommands.POSITIONS, self.cmd_positions))
        
        # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞–º–∏
        self.app.add_handler(CommandHandler(TelegramCommands.MODE, self.cmd_mode))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
        self.app.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    def set_orchestrator(self, orchestrator):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä.
        
        Args:
            orchestrator: –≠–∫–∑–µ–º–ø–ª—è—Ä –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        """
        self.orchestrator = orchestrator
        logger.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä")
    
    def start_in_background(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        if self.is_running:
            logger.warning("Telegram –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        async def _start_bot():
            await self.start()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        loop = asyncio.new_event_loop()
        t = threading.Thread(target=self._run_bot_in_thread, args=(loop, _start_bot), daemon=True)
        t.start()
        logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
    
    def _run_bot_in_thread(self, loop, coro_func):
        """
        –ó–∞–ø—É—Å–∫ –∫–æ—Ä—É—Ç–∏–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
        
        Args:
            loop: –¶–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
            coro_func: –ö–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        """
        asyncio.set_event_loop(loop)
        loop.run_until_complete(coro_func())
        loop.run_forever()
    
    async def send_message(self, text: str, reply_markup: Optional[InlineKeyboardMarkup] = None) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç.
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            reply_markup: –†–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        if not self.is_running:
            logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            await self.app.bot.send_message(
                chat_id=self.chat_id,
                text=text,
                parse_mode="Markdown",
                reply_markup=reply_markup
            )
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text[:50]}...")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def send_trade_notification(self, 
                                     symbol: str, 
                                     direction: str, 
                                     price: float, 
                                     size: float, 
                                     pnl: Optional[float] = None) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.
        
        Args:
            symbol: –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ (BUY/SELL)
            price: –¶–µ–Ω–∞
            size: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            pnl: –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
        is_open = direction == TradeDirections.BUY
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if is_open:
            title = self.localization.get("telegram.position_opened")
            emoji = "üü¢"
        else:
            title = self.localization.get("telegram.position_closed")
            emoji = "üî¥"
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
        mode = self.config.get("TRADING_MODE", TradingModes.DRY)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = f"StableTrade\n"
        
        if mode == TradingModes.DRY:
            message += f"üöÄ *–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞*\n\n"
        
        message += f"{emoji} *{title}*\n"
        message += f"‚óÜ –ü–∞—Ä–∞: *{symbol}*\n"
        message += f"‚óÜ –¶–µ–Ω–∞: *{price}*\n"
        message += f"‚óÜ –†–∞–∑–º–µ—Ä: *{size}*\n"
        
        if pnl is not None:
            message += f"üí∞ P&L: *{pnl:.2f} USDT*\n"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        message += f"üïí *{now}*\n"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã
        if is_open:
            quote = self.localization.get("telegram.quote_open")
            message += f"\nüí¨ _{quote}_"
        else:
            quote = self.localization.get("telegram.quote_close")
            message += f"\nüí¨ _{quote}_"
        
        await self.send_message(message)
    
    async def send_status_update(self, 
                                symbol: str, 
                                mode: str, 
                                balance: float, 
                                leverage: int, 
                                risk_per_trade: float,
                                stop_loss: float,
                                take_profit: float) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞.
        
        Args:
            symbol: –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
            mode: –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
            balance: –ë–∞–ª–∞–Ω—Å
            leverage: –ü–ª–µ—á–æ
            risk_per_trade: –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É
            stop_loss: –°—Ç–æ–ø-–ª–æ—Å—Å
            take_profit: –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
        """
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = f"StableTrade\n"
        
        if mode == TradingModes.DRY:
            message += f"üöÄ *–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞*\n\n"
        elif mode == TradingModes.BACKTEST:
            message += f"üìä *–ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω*\n\n"
        else:
            message += f"üíπ *–†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞*\n\n"
        
        message += f"‚óÜ –°–∏–º–≤–æ–ª: *{symbol}*\n"
        message += f"‚óÜ –†–µ–∂–∏–º: *{self._get_mode_display(mode)}*\n"
        message += f"‚óÜ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: *{balance:.1f} USDT*\n"
        message += f"‚óÜ –ü–ª–µ—á–æ: *{leverage}x*\n"
        message += f"‚óÜ –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: *{risk_per_trade:.1f}%*\n"
        message += f"‚óÜ –°—Ç–æ–ø-–ª–æ—Å—Å: *{stop_loss:.1f}%*\n"
        message += f"‚óÜ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: *{take_profit:.1f}%*\n"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        message += f"üïí *{now}*"
        
        await self.send_message(message)
    
    def _get_mode_display(self, mode: str) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞.
        
        Args:
            mode: –ö–æ–¥ —Ä–µ–∂–∏–º–∞
            
        Returns:
            –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞
        """
        mode_map = {
            TradingModes.DRY: "–°–∏–º—É–ª—è—Ü–∏—è (Dry Mode)",
            TradingModes.BACKTEST: "–ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥",
            TradingModes.REAL: "–†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è"
        }
        return mode_map.get(mode, mode)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        keyboard = [
            [
                InlineKeyboardButton("–°—Ç–∞—Ç—É—Å", callback_data=TelegramCallbacks.STATUS),
                InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data=TelegramCallbacks.HELP)
            ],
            [
                InlineKeyboardButton("–†–µ–∂–∏–º—ã", callback_data=TelegramCallbacks.MODES),
                InlineKeyboardButton("–¢–æ—Ä–≥–æ–≤–ª—è", callback_data=TelegramCallbacks.TRADE)
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            self.localization.get("telegram.welcome"),
            reply_markup=reply_markup
        )
    
    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
        help_text = self.localization.get("telegram.help_text")
        await update.message.reply_text(
            help_text,
            parse_mode="Markdown"
        )
    
    async def cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status."""
        if not self.orchestrator:
            await update.message.reply_text(self.localization.get("telegram.no_orchestrator"))
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        status = await self.orchestrator.get_status()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        await update.message.reply_text(status)
    
    async def cmd_trade(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /trade."""
        keyboard = [
            [
                InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å LONG", callback_data=TelegramCallbacks.OPEN_LONG),
                InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å SHORT", callback_data=TelegramCallbacks.OPEN_SHORT)
            ],
            [
                InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏", callback_data=TelegramCallbacks.CLOSE_ALL)
            ],
            [
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=TelegramCallbacks.BACK_TO_MAIN)
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            self.localization.get("telegram.trade_options"),
            reply_markup=reply_markup
        )
    
    async def cmd_balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance."""
        if not self.orchestrator:
            await update.message.reply_text(self.localization.get("telegram.no_orchestrator"))
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        balance = await self.orchestrator.get_balance()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        await update.message.reply_text(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f} USDT")
    
    async def cmd_positions(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /positions."""
        if not self.orchestrator:
            await update.message.reply_text(self.localization.get("telegram.no_orchestrator"))
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –æ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        positions = await self.orchestrator.get_positions()
        
        if not positions:
            await update.message.reply_text(self.localization.get("telegram.no_positions"))
            return
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
        message = self.localization.get("telegram.positions_header") + "\n\n"
        
        for pos in positions:
            message += f"–°–∏–º–≤–æ–ª: {pos['symbol']}\n"
            message += f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {pos['direction']}\n"
            message += f"–†–∞–∑–º–µ—Ä: {pos['size']:.2f}\n"
            message += f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {pos['entry_price']:.8f}\n"
            message += f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {pos['current_price']:.8f}\n"
            message += f"PnL: {pos['pnl']:.2f} USDT\n\n"
        
        await update.message.reply_text(message)
    
    async def cmd_mode(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mode."""
        keyboard = [
            [
                InlineKeyboardButton("–°–∏–º—É–ª—è—Ü–∏—è", callback_data=f"{TelegramCallbacks.SET_MODE_PREFIX}{TradingModes.DRY}"),
                InlineKeyboardButton("–ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥", callback_data=f"{TelegramCallbacks.SET_MODE_PREFIX}{TradingModes.BACKTEST}")
            ],
            [
                InlineKeyboardButton("–†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", callback_data=f"{TelegramCallbacks.SET_MODE_PREFIX}{TradingModes.REAL}")
            ],
            [
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=TelegramCallbacks.BACK_TO_MAIN)
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            self.localization.get("telegram.select_mode"),
            reply_markup=reply_markup
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫."""
        query = update.callback_query
        await query.answer()
        
        callback_data = query.data
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        if callback_data == TelegramCallbacks.STATUS:
            await self.cmd_status(update, context)
        elif callback_data == TelegramCallbacks.HELP:
            await self.cmd_help(update, context)
        elif callback_data == TelegramCallbacks.MODES:
            await self.cmd_mode(update, context)
        elif callback_data == TelegramCallbacks.TRADE:
            await self.cmd_trade(update, context)
        elif callback_data == TelegramCallbacks.BACK_TO_MAIN:
            await self.cmd_start(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        elif callback_data == TelegramCallbacks.OPEN_LONG:
            await self._handle_open_position(update, TradeDirections.BUY)
        elif callback_data == TelegramCallbacks.OPEN_SHORT:
            await self._handle_open_position(update, TradeDirections.SELL)
        elif callback_data == TelegramCallbacks.CLOSE_ALL:
            await self._handle_close_all_positions(update)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–æ–≤
        elif callback_data.startswith(TelegramCallbacks.SET_MODE_PREFIX):
            mode = callback_data.replace(TelegramCallbacks.SET_MODE_PREFIX, "")
            await self._handle_set_mode(update, mode)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–ª–±—ç–∫–æ–≤
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–ª–±—ç–∫: {callback_data}")
            await query.edit_message_text(self.localization.get("telegram.unknown_callback"))
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        text = update.message.text
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
        
        await update.message.reply_text(
            self.localization.get("telegram.unknown_command"),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data=TelegramCallbacks.HELP)]
            ])
        )
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤
    
    async def _handle_open_position(self, update: Update, direction: str) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        """
        if not self.orchestrator:
            await update.callback_query.edit_message_text(
                self.localization.get("telegram.no_orchestrator")
            )
            return
        
        try:
            # –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            result = await self.orchestrator.open_position(direction=direction)
            
            if result.get("success"):
                message = self.localization.get("telegram.position_opened_success")
                message += f"\n–°–∏–º–≤–æ–ª: {result.get('symbol')}"
                message += f"\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}"
                message += f"\n–¶–µ–Ω–∞: {result.get('price')}"
                message += f"\n–†–∞–∑–º–µ—Ä: {result.get('size')}"
            else:
                message = self.localization.get("telegram.position_opened_error")
                message += f"\n–û—à–∏–±–∫–∞: {result.get('error')}"
            
            await update.callback_query.edit_message_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            await update.callback_query.edit_message_text(
                self.localization.get("telegram.error_occurred")
            )
    
    async def _handle_close_all_positions(self, update: Update) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        if not self.orchestrator:
            await update.callback_query.edit_message_text(
                self.localization.get("telegram.no_orchestrator")
            )
            return
        
        try:
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            result = await self.orchestrator.close_all_positions()
            
            if result.get("success"):
                message = self.localization.get("telegram.positions_closed_success")
                message += f"\n–ó–∞–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π: {result.get('count')}"
                message += f"\n–û–±—â–∏–π P&L: {result.get('total_pnl'):.2f} USDT"
            else:
                message = self.localization.get("telegram.positions_closed_error")
                message += f"\n–û—à–∏–±–∫–∞: {result.get('error')}"
            
            await update.callback_query.edit_message_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
            await update.callback_query.edit_message_text(
                self.localization.get("telegram.error_occurred")
            )
    
    async def _handle_set_mode(self, update: Update, mode: str) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            mode: –ù–æ–≤—ã–π —Ä–µ–∂–∏–º
        """
        if not self.orchestrator:
            await update.callback_query.edit_message_text(
                self.localization.get("telegram.no_orchestrator")
            )
            return
        
        try:
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            result = await self.orchestrator.set_mode(mode)
            
            if result.get("success"):
                message = self.localization.get("telegram.mode_changed_success")
                message += f"\n–ù–æ–≤—ã–π —Ä–µ–∂–∏–º: {self._get_mode_display(mode)}"
            else:
                message = self.localization.get("telegram.mode_changed_error")
                message += f"\n–û—à–∏–±–∫–∞: {result.get('error')}"
            
            await update.callback_query.edit_message_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞: {e}")
            await update.callback_query.edit_message_text(
                self.localization.get("telegram.error_occurred")
            ) 