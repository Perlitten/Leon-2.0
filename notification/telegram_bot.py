"""
–ú–æ–¥—É–ª—å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram API.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram.
"""

import logging
import asyncio
from typing import Dict, Any, Optional, List, Union
import traceback

try:
    import telegram
    from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
    TELEGRAM_AVAILABLE = True
except ImportError:
    TELEGRAM_AVAILABLE = False

from core.localization import LocalizationManager

logger = logging.getLogger(__name__)

class TelegramIntegration:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram API.
    
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞.
    """
    
    def __init__(self, token: str, chat_id: str, config: Dict[str, Any] = None, localization: LocalizationManager = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram.
        
        Args:
            token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            config: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            localization: –ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        self.logger = logging.getLogger("TelegramIntegration")
        
        if not TELEGRAM_AVAILABLE:
            self.logger.error("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            self.available = False
            return
            
        self.token = token
        self.chat_id = chat_id
        self.config = config or {}
        self.bot = None
        self.connected = False
        self.available = True
        self.localization = localization
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        try:
            self.bot = telegram.Bot(token=self.token)
            self.connected = True
            self.logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {str(e)}")
            self.connected = False
            
    async def _async_check_connection(self) -> bool:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API.
        
        Returns:
            bool: True, –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –∏–Ω–∞—á–µ False
        """
        try:
            await self.bot.get_me()
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {str(e)}")
            return False
            
    async def ensure_connected(self) -> bool:
        """
        –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API.
        
        Returns:
            bool: True, –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –∏–Ω–∞—á–µ False
        """
        if self.connected:
            return True
            
        try:
            await self._async_check_connection()
            self.connected = True
            self.logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API: {e}")
            return False
            
    async def send_message(self, text: str, parse_mode: str = "Markdown") -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            
        Returns:
            bool: True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∏–Ω–∞—á–µ False
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not await self.ensure_connected():
            return False
            
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        max_length = 4096
        if len(text) > max_length:
            chunks = [text[i:i+max_length] for i in range(0, len(text), max_length)]
            success = True
            for chunk in chunks:
                if not await self._send_message_internal(chunk, parse_mode):
                    success = False
            return success
        else:
            return await self._send_message_internal(text, parse_mode)
            
    async def _send_message_internal(self, text: str, parse_mode: str) -> bool:
        """
        –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram.
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            
        Returns:
            bool: True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∏–Ω–∞—á–µ False
        """
        try:
            await self.bot.send_message(
                chat_id=self.chat_id,
                text=text,
                parse_mode=parse_mode
            )
            return True
        except telegram.error.NetworkError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.connected = False
            return False
        except telegram.error.Unauthorized as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            # –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
            return False
        except Exception as e:
            self.logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.connected = False
            return False
    
    async def send_trade_notification(self, symbol: str, direction: str, 
                                     price: float, size: float, 
                                     pnl: Optional[float] = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.
        
        Args:
            symbol: –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ (BUY/SELL)
            price: –¶–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            size: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            pnl: –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            bool: True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∏–Ω–∞—á–µ False
        """
        emoji = "üü¢" if direction == "BUY" else "üî¥"
        
        if self.localization:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
            direction_text = self.localization.get_text("trading.directions.buy") if direction == "BUY" else self.localization.get_text("trading.directions.sell")
            price_text = self.localization.get_text("trading.price")
            volume_text = self.localization.get_text("trading.volume")
            pnl_text = self.localization.get_text("trading.pnl")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ç–∞—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –≤ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
            quote = self.localization.get_text("notifications.telegram.quote_open", default="")
            
            message = f"{emoji} *{direction_text}* {symbol}\n"
            message += f"üí∞ {price_text}: {price}\n"
            message += f"üìä {volume_text}: {size}\n"
            
            if pnl is not None:
                pnl_emoji = "‚úÖ" if pnl >= 0 else "‚ùå"
                message += f"{pnl_emoji} {pnl_text}: {pnl:.2f}%\n"
            
            if quote:
                message += f"\nüí¨ _{quote}_"
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
            message = f"{emoji} *{direction}* {symbol}\n"
            message += f"üí∞ –¶–µ–Ω–∞: {price}\n"
            message += f"üìä –û–±—ä–µ–º: {size}\n"
            
            if pnl is not None:
                pnl_emoji = "‚úÖ" if pnl >= 0 else "‚ùå"
                message += f"{pnl_emoji} P&L: {pnl:.2f}%\n"
        
        return await self.send_message(message)
    
    async def send_status_update(self, symbol: str, mode: str, 
                                balance: float, leverage: int,
                                risk_per_trade: float, stop_loss: float,
                                take_profit: float) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞.
        
        Args:
            symbol: –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
            mode: –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (dry/real)
            balance: –ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
            leverage: –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ
            risk_per_trade: –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É (%)
            stop_loss: –°—Ç–æ–ø-–ª–æ—Å—Å (%)
            take_profit: –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (%)
            
        Returns:
            bool: True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∏–Ω–∞—á–µ False
        """
        mode_emoji = "üß™" if mode == "dry" else "üî•"
        
        if self.localization:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
            status_title = self.localization.get_text("notifications.telegram.status_update")
            mode_text = self.localization.get_text("notifications.telegram.mode")
            symbol_text = self.localization.get_text("notifications.telegram.symbol")
            balance_text = self.localization.get_text("notifications.telegram.balance")
            leverage_text = self.localization.get_text("notifications.telegram.leverage")
            risk_text = self.localization.get_text("notifications.telegram.risk_per_trade")
            sl_text = self.localization.get_text("notifications.telegram.stop_loss")
            tp_text = self.localization.get_text("notifications.telegram.take_profit")
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞
            mode_name = self.localization.get_text(f"trading.modes.{mode}", default=mode.upper())
            
            message = f"üìä *{status_title}*\n\n"
            message += f"{mode_emoji} {mode_text}: {mode_name}\n"
            message += f"üí± {symbol_text}: {symbol}\n"
            message += f"üí∞ {balance_text}: {balance:.2f} USDT\n"
            message += f"‚ö° {leverage_text}: {leverage}x\n"
            message += f"‚ö†Ô∏è {risk_text}: {risk_per_trade}%\n"
            message += f"üõë {sl_text}: {stop_loss}%\n"
            message += f"üéØ {tp_text}: {take_profit}%\n"
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
            message = f"üìä *–°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞*\n\n"
            message += f"{mode_emoji} –†–µ–∂–∏–º: {mode.upper()}\n"
            message += f"üí± –ü–∞—Ä–∞: {symbol}\n"
            message += f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance:.2f} USDT\n"
            message += f"‚ö° –ü–ª–µ—á–æ: {leverage}x\n"
            message += f"‚ö†Ô∏è –†–∏—Å–∫: {risk_per_trade}%\n"
            message += f"üõë SL: {stop_loss}%\n"
            message += f"üéØ TP: {take_profit}%\n"
        
        return await self.send_message(message)
    
    async def send_message_direct(self, text: str, parse_mode: str = "Markdown") -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (Markdown, HTML)
            
        Returns:
            bool: True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –∏–Ω–∞—á–µ False
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            bot = telegram.Bot(token=self.token)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_message(
                chat_id=self.chat_id,
                text=text,
                parse_mode=parse_mode
            )
            logger.info(f"[DIRECT] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: {text[:50]}...")
            return True
        except Exception as e:
            logger.error(f"[DIRECT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {str(e)}")
            logger.debug(traceback.format_exc())
            return False 